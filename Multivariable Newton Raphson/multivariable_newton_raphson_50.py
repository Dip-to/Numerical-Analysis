# -*- coding: utf-8 -*-
"""multivariable_newton_raphson_50.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/19WknVrnewkEU8o44hvO7TCBauu_HFWdV
"""

import numpy as np
equation1 = lambda x, y, z: x**2 - 2*x + y**2 - z + 1
equation2 = lambda x, y, z: x*y**2 - x - y*3 + y*z + 2
equation3 = lambda x, y, z: x*z**2 - 3*z + y*z**2 + x*y

def f(x,y,z):
    A= np.array([
        equation1(x, y, z),
        equation2(x, y, z),
        equation3(x, y, z)
    ])
    return A

def J(x,y,z):
    A= np.array([
        [2 * x -2+0,
         2*y,
         -1],
        [y**2-1+0,
         2*x*y-3+0+z,
         y+0],
        [z**2+y+0,
         z**2+0+x,
         2*x*z-3+2*y*z+0]
    ])
    return A


iter = 10000
tolerance=1e-6
print("\nMultvariable Newton Raphson:")
print("-----------------------------------------------------")
print("|Iteration|      x     |      y     |      z     |")
print("-----------------------------------------------------")
x0 =x= np.array([1.0, 2.0, 3.0])


for i in range(iter):
    J_INV=np.linalg.inv(J(x[0],x[1],x[2]))
    tmp= np.dot( J_INV,f(x[0],x[1],x[2]))
    x=x-tmp
    print(f"  {i:5}   | {x[0]:10.6f} | {x[1]:10.6f} | {x[2]:10.6f} | ")
    J_INV=0
    if np.allclose(f(x[0],x[1],x[2]), np.array([0, 0, 0]),atol=tolerance):
       print(f"\nThe final root is: {x[0],x[1],x[2]}")
       break