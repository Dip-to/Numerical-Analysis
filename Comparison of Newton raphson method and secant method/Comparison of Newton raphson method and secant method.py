# -*- coding: utf-8 -*-
"""50.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BwkYZH8UpSrjrh1ynatDmbWwKDYWkveH
"""

import matplotlib.pyplot as plt
import numpy as np
# import matplotlib.pyplot as plt
# import numpy as np
def f(x):
    return x ** 3 - x - 1
def df(x):
    return 3*x ** 2 - 1
print("Secant Method ")
print("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
print(" iteration  |     X i-1   |      f(x i-1)   |        xi       |       f(xi)     |        x i+1       |       f(x i+1)     | Approximation Error | Relative Approximation Error")
print("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
x0 = 50
x1=48
iteration = 1
it_arr = []
apprx_arr=[]
r_apprx_arr=[]
while abs(f(x1)) >= 10 ** -5:
    it_arr.append(iteration)
    x_new=(x0*f(x1)-x1*f(x0))
    x_new/=(f(x1)-f(x0))
    apprx =abs(x_new - x1)
    r_apprx = (apprx * 100) / x_new
    print(f" {iteration:10} | {x0:10.6f}  | {f(x0):15.6f} | {x1:15.6f} | {f(x1):15.6f} | {x_new:15.6f} | {f(x_new):15.6f} | {apprx:19.6f} | {r_apprx:20.6f}%")
    iteration+=1
    x0=x1
    x1=x_new
    apprx_arr.append(apprx)
    r_apprx_arr.append(r_apprx)
x = np.array(it_arr)
y = np.array(apprx_arr)

plt.bar(x,y)
plt.xlabel("Iteration")
plt.ylabel("Apprx Error")
plt.show()

x = np.array(it_arr)
y = np.array(r_apprx_arr)

plt.bar(x,y)
plt.xlabel("Iteration")
plt.ylabel("Relative Apprx Error")
plt.show()

print("\nNewton Raphson:")
print("---------------------------------------------------------------------------------------------------------------------------")
print("      Xi      |       f(xi)      |      f'(xi)     |       xi+1     | Approximation Error | Relative Approximation Error")
print("---------------------------------------------------------------------------------------------------------------------------")
x0 = 50
iteration = 1
n_it_arr = []
n_apprx_arr=[]
n_r_apprx_arr=[]
while abs(f(x0)) >= 10 ** -5:
    n_it_arr.append(iteration)
    iteration += 1
    xi = x0 - (f(x0) / df(x0))
    apprx =abs( xi - x0)
    r_apprx = (apprx * 100) / xi
    print(f"  {x0:10.6f}  | {f(x0):15.6f} | {df(x0):15.6f} | {xi:15.6f} | {apprx:19.6f} | {r_apprx:20.6f}%")
    n_apprx_arr.append(apprx)
    n_r_apprx_arr.append(r_apprx)
    x0 = xi

x = np.array(it_arr)
y = np.array(apprx_arr)
xx = np.array(n_it_arr)
yy = np.array(n_apprx_arr)
print("")
plt.bar(xx,yy)
plt.xlabel("Iteration")
plt.ylabel("Apprx Error")
plt.show()
print("")
plt.plot(x, y, label = "Secant Method")
plt.plot(xx, yy, label = "Newton Raphson")
plt.xlabel("Iteration")
plt.ylabel("Apprx Error")
plt.legend()
plt.show()
print("")

x = np.array(it_arr)
y = np.array(r_apprx_arr)
xx = np.array(n_it_arr)
yy = np.array(n_r_apprx_arr)

plt.plot(x, y, label = "Secant Method")
plt.plot(xx, yy, label = "Newton Raphson")
plt.xlabel("Iteration")
plt.ylabel("Relative Apprx Error")
plt.legend()
plt.show()