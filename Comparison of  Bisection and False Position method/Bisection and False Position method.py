# -*- coding: utf-8 -*-
"""lab3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uUxQHTljo1kwBxy9IESi2ZMzN37VnY84
"""

import matplotlib.pyplot as plt
import numpy as np

def f(x):
    return x ** 3 - x - 1

def bar_graph(x,y,xx,yy,method):
    print(method + ":\n")
    plt.bar(x,y,label=f"{method} \nApproximate Error vs Iteration")
    plt.xlabel("Iteration")
    plt.ylabel("Approximate Error")
    plt.legend()
    plt.show()

    plt.bar(xx,yy,label=f"{method} \nRelative Approximate Error vs Iteration")
    plt.xlabel("Iteration")
    plt.ylabel("Relative Approximate Error")
    plt.legend()
    plt.show()
def plot_graph(x,y,xx,yy,method):
    print(method+ ":\n")
    plt.plot(x, y, label = "Bisection Method")
    plt.plot(xx, yy, label = "False Position Raphson")
    plt.xlabel("Iteration")
    plt.ylabel(method)
    plt.legend()
    plt.show()


print("Bisection Method: ")
print("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
print("iteration|      a      |       f(a)      |        b        |       f(b)      |       c     |        f(c)     | decision | Approximation Error | Relative Approximation Error")
print("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
a=50
b=-50
c=-1
iteration=1
b_it_arr = []
b_apprx_arr=[]
b_r_apprx_arr=[]
while abs(f(c)) >= 10 ** -5 or iteration==1:
   c=(a+b)/2
   fa=f(a)
   fb=f(b)
   fc=f(c)
   s=' '
   temp_a=a
   temp_b=b
   if fc*fb<0:
       apprx=abs(c-a)
       a=c
       s='a=c'
   else:
       apprx=abs(c-b)
       b=c
       s='b=c'
   r_apprx=(apprx*100)
   if c==0:
       r_apprx=100
   else:
      r_apprx=r_apprx/c
   print(f"  {iteration:6} | {temp_a:10.5f}  | {f(temp_a):15.5f} | {temp_b:15.5f} | {f(temp_b):15.5f} | {c:10.5f}  | {f(c):15.5f} |    {s}   | {apprx:19.6f} | {r_apprx:20.6f}%")
   b_it_arr.append(iteration)
   b_apprx_arr.append(apprx)
   b_r_apprx_arr.append(r_apprx)
   iteration=iteration+1
bar_graph( b_it_arr,b_apprx_arr,b_it_arr,b_r_apprx_arr,"Bisection Method")

print("False Position method: \n\n ")
print("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
print(" iteration  |     X0  |      f(x0)   |        x1       |       f(x1)     |        x2        |       f(x2)     | decision | Approximation Error | Relative Approximation Error")
print("---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------")
x0 = 50
x1=-50
x_new=50
iteration = 1
it_arr = []
apprx_arr=[]
r_apprx_arr=[]
while abs(f(x_new)) >= 10 ** -2 or iteration==1:
    it_arr.append(iteration)
    x_new=(x0*f(x1)-x1*f(x0))
    x_new/=(f(x1)-f(x0))
    fx0=f(x0)
    fx1=f(x1)
    fx2=f(x_new)
    x1_tmp=x1
    x0_tmp=x0
    if fx2*fx1<0:
       apprx=abs(x_new-x0)
       x0=x_new
       s='x0=x2'
    else:
       apprx=abs(x_new-x1)
       x1=x_new
       s='x1=x2'
    if(abs(x_new)>(10**-3)):
        r_apprx=abs(apprx/x_new)
    else:
        r_apprx=np.nan
    print(f" {iteration:10} | {x0_tmp:10.6f}  | {f(x0_tmp):15.6f} | {x1_tmp:15.6f} | {f(x1_tmp):15.6f} | {x_new:15.6f} | {f(x_new):15.6f} |    {s}   | {apprx:19.6f} | {r_apprx:20.6f}%")
    iteration+=1
    apprx_arr.append(apprx)
    r_apprx_arr.append(r_apprx)
bar_graph( it_arr,apprx_arr,it_arr,r_apprx_arr,"False Position Method")
plot_graph(b_it_arr,b_apprx_arr,it_arr,apprx_arr,"Approximate Error")
plot_graph(b_it_arr,b_r_apprx_arr,it_arr,r_apprx_arr,"Relative Approximate Error")